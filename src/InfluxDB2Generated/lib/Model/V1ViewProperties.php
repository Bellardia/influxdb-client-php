<?php
/**
 * V1ViewProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfluxDB2Generated\Model;

use \ArrayAccess;
use \InfluxDB2Generated\ObjectSerializer;

/**
 * V1ViewProperties Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class V1ViewProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V1ViewProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'queries' => '\InfluxDB2Generated\Model\DashboardQuery[]',
        'axes' => '\InfluxDB2Generated\Model\V1ViewPropertiesAxes',
        'graph_type' => 'string',
        'colors' => '\InfluxDB2Generated\Model\DashboardColor[]',
        'legend' => '\InfluxDB2Generated\Model\V1ViewPropertiesLegend',
        'table_options' => 'object',
        'field_options' => '\InfluxDB2Generated\Model\RenamableField[]',
        'time_format' => 'string',
        'decimal_points' => '\InfluxDB2Generated\Model\V1ViewPropertiesDecimalPoints'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'queries' => null,
        'axes' => null,
        'graph_type' => null,
        'colors' => null,
        'legend' => null,
        'table_options' => null,
        'field_options' => null,
        'time_format' => null,
        'decimal_points' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'queries' => 'queries',
        'axes' => 'axes',
        'graph_type' => 'graphType',
        'colors' => 'colors',
        'legend' => 'legend',
        'table_options' => 'tableOptions',
        'field_options' => 'fieldOptions',
        'time_format' => 'timeFormat',
        'decimal_points' => 'decimalPoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'queries' => 'setQueries',
        'axes' => 'setAxes',
        'graph_type' => 'setGraphType',
        'colors' => 'setColors',
        'legend' => 'setLegend',
        'table_options' => 'setTableOptions',
        'field_options' => 'setFieldOptions',
        'time_format' => 'setTimeFormat',
        'decimal_points' => 'setDecimalPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'queries' => 'getQueries',
        'axes' => 'getAxes',
        'graph_type' => 'getGraphType',
        'colors' => 'getColors',
        'legend' => 'getLegend',
        'table_options' => 'getTableOptions',
        'field_options' => 'getFieldOptions',
        'time_format' => 'getTimeFormat',
        'decimal_points' => 'getDecimalPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CHRONOGRAF_V1 = 'chronograf-v1';
    const GRAPH_TYPE_SINGLE_STAT = 'single-stat';
    const GRAPH_TYPE_LINE = 'line';
    const GRAPH_TYPE_LINE_PLUS_SINGLE_STAT = 'line-plus-single-stat';
    const GRAPH_TYPE_LINE_STACKED = 'line-stacked';
    const GRAPH_TYPE_LINE_STEPPLOT = 'line-stepplot';
    const GRAPH_TYPE_BAR = 'bar';
    const GRAPH_TYPE_GAUGE = 'gauge';
    const GRAPH_TYPE_TABLE = 'table';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CHRONOGRAF_V1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGraphTypeAllowableValues()
    {
        return [
            self::GRAPH_TYPE_SINGLE_STAT,
            self::GRAPH_TYPE_LINE,
            self::GRAPH_TYPE_LINE_PLUS_SINGLE_STAT,
            self::GRAPH_TYPE_LINE_STACKED,
            self::GRAPH_TYPE_LINE_STEPPLOT,
            self::GRAPH_TYPE_BAR,
            self::GRAPH_TYPE_GAUGE,
            self::GRAPH_TYPE_TABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['queries'] = isset($data['queries']) ? $data['queries'] : null;
        $this->container['axes'] = isset($data['axes']) ? $data['axes'] : null;
        $this->container['graph_type'] = isset($data['graph_type']) ? $data['graph_type'] : 'line';
        $this->container['colors'] = isset($data['colors']) ? $data['colors'] : null;
        $this->container['legend'] = isset($data['legend']) ? $data['legend'] : null;
        $this->container['table_options'] = isset($data['table_options']) ? $data['table_options'] : null;
        $this->container['field_options'] = isset($data['field_options']) ? $data['field_options'] : null;
        $this->container['time_format'] = isset($data['time_format']) ? $data['time_format'] : null;
        $this->container['decimal_points'] = isset($data['decimal_points']) ? $data['decimal_points'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGraphTypeAllowableValues();
        if (!is_null($this->container['graph_type']) && !in_array($this->container['graph_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'graph_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets queries
     *
     * @return \InfluxDB2Generated\Model\DashboardQuery[]|null
     */
    public function getQueries()
    {
        return $this->container['queries'];
    }

    /**
     * Sets queries
     *
     * @param \InfluxDB2Generated\Model\DashboardQuery[]|null $queries queries
     *
     * @return $this
     */
    public function setQueries($queries)
    {
        $this->container['queries'] = $queries;

        return $this;
    }

    /**
     * Gets axes
     *
     * @return \InfluxDB2Generated\Model\V1ViewPropertiesAxes|null
     */
    public function getAxes()
    {
        return $this->container['axes'];
    }

    /**
     * Sets axes
     *
     * @param \InfluxDB2Generated\Model\V1ViewPropertiesAxes|null $axes axes
     *
     * @return $this
     */
    public function setAxes($axes)
    {
        $this->container['axes'] = $axes;

        return $this;
    }

    /**
     * Gets graph_type
     *
     * @return string|null
     */
    public function getGraphType()
    {
        return $this->container['graph_type'];
    }

    /**
     * Sets graph_type
     *
     * @param string|null $graph_type The viewport for a view's graph/visualization
     *
     * @return $this
     */
    public function setGraphType($graph_type)
    {
        $allowedValues = $this->getGraphTypeAllowableValues();
        if (!is_null($graph_type) && !in_array($graph_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'graph_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['graph_type'] = $graph_type;

        return $this;
    }

    /**
     * Gets colors
     *
     * @return \InfluxDB2Generated\Model\DashboardColor[]|null
     */
    public function getColors()
    {
        return $this->container['colors'];
    }

    /**
     * Sets colors
     *
     * @param \InfluxDB2Generated\Model\DashboardColor[]|null $colors Colors define color encoding of data into a visualization
     *
     * @return $this
     */
    public function setColors($colors)
    {
        $this->container['colors'] = $colors;

        return $this;
    }

    /**
     * Gets legend
     *
     * @return \InfluxDB2Generated\Model\V1ViewPropertiesLegend|null
     */
    public function getLegend()
    {
        return $this->container['legend'];
    }

    /**
     * Sets legend
     *
     * @param \InfluxDB2Generated\Model\V1ViewPropertiesLegend|null $legend legend
     *
     * @return $this
     */
    public function setLegend($legend)
    {
        $this->container['legend'] = $legend;

        return $this;
    }

    /**
     * Gets table_options
     *
     * @return object|null
     */
    public function getTableOptions()
    {
        return $this->container['table_options'];
    }

    /**
     * Sets table_options
     *
     * @param object|null $table_options table_options
     *
     * @return $this
     */
    public function setTableOptions($table_options)
    {
        $this->container['table_options'] = $table_options;

        return $this;
    }

    /**
     * Gets field_options
     *
     * @return \InfluxDB2Generated\Model\RenamableField[]|null
     */
    public function getFieldOptions()
    {
        return $this->container['field_options'];
    }

    /**
     * Sets field_options
     *
     * @param \InfluxDB2Generated\Model\RenamableField[]|null $field_options fieldOptions represent the fields retrieved by the query with customization options
     *
     * @return $this
     */
    public function setFieldOptions($field_options)
    {
        $this->container['field_options'] = $field_options;

        return $this;
    }

    /**
     * Gets time_format
     *
     * @return string|null
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     *
     * @param string|null $time_format timeFormat describes the display format for time values according to moment.js date formatting
     *
     * @return $this
     */
    public function setTimeFormat($time_format)
    {
        $this->container['time_format'] = $time_format;

        return $this;
    }

    /**
     * Gets decimal_points
     *
     * @return \InfluxDB2Generated\Model\V1ViewPropertiesDecimalPoints|null
     */
    public function getDecimalPoints()
    {
        return $this->container['decimal_points'];
    }

    /**
     * Sets decimal_points
     *
     * @param \InfluxDB2Generated\Model\V1ViewPropertiesDecimalPoints|null $decimal_points decimal_points
     *
     * @return $this
     */
    public function setDecimalPoints($decimal_points)
    {
        $this->container['decimal_points'] = $decimal_points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



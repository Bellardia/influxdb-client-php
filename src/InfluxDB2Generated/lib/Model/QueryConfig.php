<?php
/**
 * QueryConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfluxDB2Generated\Model;

use \ArrayAccess;
use \InfluxDB2Generated\ObjectSerializer;

/**
 * QueryConfig Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QueryConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'database' => 'string',
        'measurement' => 'string',
        'retention_policy' => 'string',
        'are_tags_accepted' => 'bool',
        'raw_text' => 'string',
        'tags' => 'object',
        'group_by' => '\InfluxDB2Generated\Model\QueryConfigGroupBy',
        'fields' => '\InfluxDB2Generated\Model\Field[]',
        'range' => '\InfluxDB2Generated\Model\QueryConfigRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'database' => null,
        'measurement' => null,
        'retention_policy' => null,
        'are_tags_accepted' => null,
        'raw_text' => null,
        'tags' => null,
        'group_by' => null,
        'fields' => null,
        'range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'database' => 'database',
        'measurement' => 'measurement',
        'retention_policy' => 'retentionPolicy',
        'are_tags_accepted' => 'areTagsAccepted',
        'raw_text' => 'rawText',
        'tags' => 'tags',
        'group_by' => 'groupBy',
        'fields' => 'fields',
        'range' => 'range'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'database' => 'setDatabase',
        'measurement' => 'setMeasurement',
        'retention_policy' => 'setRetentionPolicy',
        'are_tags_accepted' => 'setAreTagsAccepted',
        'raw_text' => 'setRawText',
        'tags' => 'setTags',
        'group_by' => 'setGroupBy',
        'fields' => 'setFields',
        'range' => 'setRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'database' => 'getDatabase',
        'measurement' => 'getMeasurement',
        'retention_policy' => 'getRetentionPolicy',
        'are_tags_accepted' => 'getAreTagsAccepted',
        'raw_text' => 'getRawText',
        'tags' => 'getTags',
        'group_by' => 'getGroupBy',
        'fields' => 'getFields',
        'range' => 'getRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['database'] = isset($data['database']) ? $data['database'] : null;
        $this->container['measurement'] = isset($data['measurement']) ? $data['measurement'] : null;
        $this->container['retention_policy'] = isset($data['retention_policy']) ? $data['retention_policy'] : null;
        $this->container['are_tags_accepted'] = isset($data['are_tags_accepted']) ? $data['are_tags_accepted'] : null;
        $this->container['raw_text'] = isset($data['raw_text']) ? $data['raw_text'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['group_by'] = isset($data['group_by']) ? $data['group_by'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['database'] === null) {
            $invalidProperties[] = "'database' can't be null";
        }
        if ($this->container['measurement'] === null) {
            $invalidProperties[] = "'measurement' can't be null";
        }
        if ($this->container['retention_policy'] === null) {
            $invalidProperties[] = "'retention_policy' can't be null";
        }
        if ($this->container['are_tags_accepted'] === null) {
            $invalidProperties[] = "'are_tags_accepted' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['group_by'] === null) {
            $invalidProperties[] = "'group_by' can't be null";
        }
        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets database
     *
     * @return string
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param string $database database
     *
     * @return $this
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets measurement
     *
     * @return string
     */
    public function getMeasurement()
    {
        return $this->container['measurement'];
    }

    /**
     * Sets measurement
     *
     * @param string $measurement measurement
     *
     * @return $this
     */
    public function setMeasurement($measurement)
    {
        $this->container['measurement'] = $measurement;

        return $this;
    }

    /**
     * Gets retention_policy
     *
     * @return string
     */
    public function getRetentionPolicy()
    {
        return $this->container['retention_policy'];
    }

    /**
     * Sets retention_policy
     *
     * @param string $retention_policy retention_policy
     *
     * @return $this
     */
    public function setRetentionPolicy($retention_policy)
    {
        $this->container['retention_policy'] = $retention_policy;

        return $this;
    }

    /**
     * Gets are_tags_accepted
     *
     * @return bool
     */
    public function getAreTagsAccepted()
    {
        return $this->container['are_tags_accepted'];
    }

    /**
     * Sets are_tags_accepted
     *
     * @param bool $are_tags_accepted are_tags_accepted
     *
     * @return $this
     */
    public function setAreTagsAccepted($are_tags_accepted)
    {
        $this->container['are_tags_accepted'] = $are_tags_accepted;

        return $this;
    }

    /**
     * Gets raw_text
     *
     * @return string|null
     */
    public function getRawText()
    {
        return $this->container['raw_text'];
    }

    /**
     * Sets raw_text
     *
     * @param string|null $raw_text raw_text
     *
     * @return $this
     */
    public function setRawText($raw_text)
    {
        $this->container['raw_text'] = $raw_text;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return object
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets group_by
     *
     * @return \InfluxDB2Generated\Model\QueryConfigGroupBy
     */
    public function getGroupBy()
    {
        return $this->container['group_by'];
    }

    /**
     * Sets group_by
     *
     * @param \InfluxDB2Generated\Model\QueryConfigGroupBy $group_by group_by
     *
     * @return $this
     */
    public function setGroupBy($group_by)
    {
        $this->container['group_by'] = $group_by;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \InfluxDB2Generated\Model\Field[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \InfluxDB2Generated\Model\Field[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \InfluxDB2Generated\Model\QueryConfigRange|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \InfluxDB2Generated\Model\QueryConfigRange|null $range range
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



<?php
/**
 * WriteApi
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfluxDB2Generated\ApiClient;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InfluxDB2Generated\ApiException;
use InfluxDB2Generated\Configuration;
use InfluxDB2Generated\HeaderSelector;
use InfluxDB2Generated\ObjectSerializer;

/**
 * WriteApi Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WriteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation writePost
     *
     * write time-series data into influxdb
     *
     * @param  string $org specifies the destination organization for writes (required)
     * @param  string $bucket specifies the destination bucket for writes (required)
     * @param  string $body line protocol body (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     * @param  string $content_encoding when present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to 'identity')
     * @param  string $content_type Content-Type is used to indicate the format of the data sent to the server. (optional, default to 'text/plain; charset=utf-8')
     * @param  int $content_length Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param  string $accept specifies the return content format. (optional, default to 'application/json')
     * @param  \InfluxDB2Generated\Model\WritePrecision $precision specifies the precision for the unix timestamps within the body line-protocol (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function writePost($org, $bucket, $body, $zap_trace_span = null, $content_encoding = 'identity', $content_type = 'text/plain; charset=utf-8', $content_length = null, $accept = 'application/json', $precision = null)
    {
        $this->writePostWithHttpInfo($org, $bucket, $body, $zap_trace_span, $content_encoding, $content_type, $content_length, $accept, $precision);
    }

    /**
     * Operation writePostWithHttpInfo
     *
     * write time-series data into influxdb
     *
     * @param  string $org specifies the destination organization for writes (required)
     * @param  string $bucket specifies the destination bucket for writes (required)
     * @param  string $body line protocol body (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     * @param  string $content_encoding when present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to 'identity')
     * @param  string $content_type Content-Type is used to indicate the format of the data sent to the server. (optional, default to 'text/plain; charset=utf-8')
     * @param  int $content_length Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param  string $accept specifies the return content format. (optional, default to 'application/json')
     * @param  \InfluxDB2Generated\Model\WritePrecision $precision specifies the precision for the unix timestamps within the body line-protocol (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function writePostWithHttpInfo($org, $bucket, $body, $zap_trace_span = null, $content_encoding = 'identity', $content_type = 'text/plain; charset=utf-8', $content_length = null, $accept = 'application/json', $precision = null)
    {
        $request = $this->writePostRequest($org, $bucket, $body, $zap_trace_span, $content_encoding, $content_type, $content_length, $accept, $precision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\LineProtocolError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\LineProtocolLengthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation writePostAsync
     *
     * write time-series data into influxdb
     *
     * @param  string $org specifies the destination organization for writes (required)
     * @param  string $bucket specifies the destination bucket for writes (required)
     * @param  string $body line protocol body (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     * @param  string $content_encoding when present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to 'identity')
     * @param  string $content_type Content-Type is used to indicate the format of the data sent to the server. (optional, default to 'text/plain; charset=utf-8')
     * @param  int $content_length Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param  string $accept specifies the return content format. (optional, default to 'application/json')
     * @param  \InfluxDB2Generated\Model\WritePrecision $precision specifies the precision for the unix timestamps within the body line-protocol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writePostAsync($org, $bucket, $body, $zap_trace_span = null, $content_encoding = 'identity', $content_type = 'text/plain; charset=utf-8', $content_length = null, $accept = 'application/json', $precision = null)
    {
        return $this->writePostAsyncWithHttpInfo($org, $bucket, $body, $zap_trace_span, $content_encoding, $content_type, $content_length, $accept, $precision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation writePostAsyncWithHttpInfo
     *
     * write time-series data into influxdb
     *
     * @param  string $org specifies the destination organization for writes (required)
     * @param  string $bucket specifies the destination bucket for writes (required)
     * @param  string $body line protocol body (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     * @param  string $content_encoding when present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to 'identity')
     * @param  string $content_type Content-Type is used to indicate the format of the data sent to the server. (optional, default to 'text/plain; charset=utf-8')
     * @param  int $content_length Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param  string $accept specifies the return content format. (optional, default to 'application/json')
     * @param  \InfluxDB2Generated\Model\WritePrecision $precision specifies the precision for the unix timestamps within the body line-protocol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writePostAsyncWithHttpInfo($org, $bucket, $body, $zap_trace_span = null, $content_encoding = 'identity', $content_type = 'text/plain; charset=utf-8', $content_length = null, $accept = 'application/json', $precision = null)
    {
        $returnType = '';
        $request = $this->writePostRequest($org, $bucket, $body, $zap_trace_span, $content_encoding, $content_type, $content_length, $accept, $precision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'writePost'
     *
     * @param  string $org specifies the destination organization for writes (required)
     * @param  string $bucket specifies the destination bucket for writes (required)
     * @param  string $body line protocol body (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     * @param  string $content_encoding when present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to 'identity')
     * @param  string $content_type Content-Type is used to indicate the format of the data sent to the server. (optional, default to 'text/plain; charset=utf-8')
     * @param  int $content_length Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param  string $accept specifies the return content format. (optional, default to 'application/json')
     * @param  \InfluxDB2Generated\Model\WritePrecision $precision specifies the precision for the unix timestamps within the body line-protocol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function writePostRequest($org, $bucket, $body, $zap_trace_span = null, $content_encoding = 'identity', $content_type = 'text/plain; charset=utf-8', $content_length = null, $accept = 'application/json', $precision = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling writePost'
            );
        }
        // verify the required parameter 'bucket' is set
        if ($bucket === null || (is_array($bucket) && count($bucket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bucket when calling writePost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling writePost'
            );
        }

        $resourcePath = '/write';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($org !== null) {
            $queryParams['org'] = ObjectSerializer::toQueryValue($org);
        }
        // query params
        if ($bucket !== null) {
            $queryParams['bucket'] = ObjectSerializer::toQueryValue($bucket);
        }
        // query params
        if ($precision !== null) {
            $queryParams['precision'] = ObjectSerializer::toQueryValue($precision);
        }
        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }
        // header params
        if ($content_encoding !== null) {
            $headerParams['Content-Encoding'] = ObjectSerializer::toHeaderValue($content_encoding);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($content_length !== null) {
            $headerParams['Content-Length'] = ObjectSerializer::toHeaderValue($content_length);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

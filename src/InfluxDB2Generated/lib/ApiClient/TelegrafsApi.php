<?php
/**
 * TelegrafsApi
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfluxDB2Generated\ApiClient;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InfluxDB2Generated\ApiException;
use InfluxDB2Generated\Configuration;
use InfluxDB2Generated\HeaderSelector;
use InfluxDB2Generated\ObjectSerializer;

/**
 * TelegrafsApi Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TelegrafsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation telegrafsGet
     *
     * @param  string $org_id specifies the organization of the resource (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\Telegrafs|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsGet($org_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsGetWithHttpInfo($org_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsGetWithHttpInfo
     *
     * @param  string $org_id specifies the organization of the resource (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\Telegrafs|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsGetWithHttpInfo($org_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsGetRequest($org_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\Telegrafs' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Telegrafs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\Telegrafs';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Telegrafs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsGetAsync
     *
     * 
     *
     * @param  string $org_id specifies the organization of the resource (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsGetAsync($org_id, $zap_trace_span = null)
    {
        return $this->telegrafsGetAsyncWithHttpInfo($org_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $org_id specifies the organization of the resource (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsGetAsyncWithHttpInfo($org_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\Telegrafs';
        $request = $this->telegrafsGetRequest($org_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsGet'
     *
     * @param  string $org_id specifies the organization of the resource (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsGetRequest($org_id, $zap_trace_span = null)
    {
        // verify the required parameter 'org_id' is set
        if ($org_id === null || (is_array($org_id) && count($org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id when calling telegrafsGet'
            );
        }

        $resourcePath = '/telegrafs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($org_id !== null) {
            $queryParams['orgID'] = ObjectSerializer::toQueryValue($org_id);
        }
        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsPost
     *
     * Create a telegraf config
     *
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config to create (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsPost($telegraf_request, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsPostWithHttpInfo($telegraf_request, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsPostWithHttpInfo
     *
     * Create a telegraf config
     *
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config to create (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsPostWithHttpInfo($telegraf_request, $zap_trace_span = null)
    {
        $request = $this->telegrafsPostRequest($telegraf_request, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\InfluxDB2Generated\Model\Telegraf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Telegraf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\Telegraf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Telegraf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsPostAsync
     *
     * Create a telegraf config
     *
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config to create (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsPostAsync($telegraf_request, $zap_trace_span = null)
    {
        return $this->telegrafsPostAsyncWithHttpInfo($telegraf_request, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsPostAsyncWithHttpInfo
     *
     * Create a telegraf config
     *
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config to create (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsPostAsyncWithHttpInfo($telegraf_request, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\Telegraf';
        $request = $this->telegrafsPostRequest($telegraf_request, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsPost'
     *
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config to create (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsPostRequest($telegraf_request, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_request' is set
        if ($telegraf_request === null || (is_array($telegraf_request) && count($telegraf_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_request when calling telegrafsPost'
            );
        }

        $resourcePath = '/telegrafs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }


        // body params
        $_tempBody = null;
        if (isset($telegraf_request)) {
            $_tempBody = $telegraf_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDDelete
     *
     * delete a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDDelete($telegraf_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDDeleteWithHttpInfo($telegraf_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDDeleteWithHttpInfo
     *
     * delete a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDDeleteWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDDeleteRequest($telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\Telegraf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Telegraf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\Telegraf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Telegraf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDDeleteAsync
     *
     * delete a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDDeleteAsync($telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDDeleteAsyncWithHttpInfo($telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDDeleteAsyncWithHttpInfo
     *
     * delete a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDDeleteAsyncWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\Telegraf';
        $request = $this->telegrafsTelegrafIDDeleteRequest($telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDDelete'
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDDeleteRequest($telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDDelete'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDGet
     *
     * Retrieve a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDGet($telegraf_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDGetWithHttpInfo($telegraf_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDGetWithHttpInfo
     *
     * Retrieve a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDGetWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDGetRequest($telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\Telegraf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Telegraf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\Telegraf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Telegraf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDGetAsync
     *
     * Retrieve a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDGetAsync($telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDGetAsyncWithHttpInfo
     *
     * Retrieve a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\Telegraf';
        $request = $this->telegrafsTelegrafIDGetRequest($telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDGet'
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDGetRequest($telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDGet'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/toml', 'application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/toml', 'application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsGet
     *
     * list all labels for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\LabelsResponse|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDLabelsGet($telegraf_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDLabelsGetWithHttpInfo($telegraf_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDLabelsGetWithHttpInfo
     *
     * list all labels for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\LabelsResponse|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDLabelsGetWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDLabelsGetRequest($telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\LabelsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\LabelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\LabelsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\LabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDLabelsGetAsync
     *
     * list all labels for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsGetAsync($telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDLabelsGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsGetAsyncWithHttpInfo
     *
     * list all labels for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\LabelsResponse';
        $request = $this->telegrafsTelegrafIDLabelsGetRequest($telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDLabelsGet'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDLabelsGetRequest($telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDLabelsGet'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsLabelIDDelete
     *
     * delete a label from a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $label_id the label ID (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function telegrafsTelegrafIDLabelsLabelIDDelete($telegraf_id, $label_id, $zap_trace_span = null)
    {
        $this->telegrafsTelegrafIDLabelsLabelIDDeleteWithHttpInfo($telegraf_id, $label_id, $zap_trace_span);
    }

    /**
     * Operation telegrafsTelegrafIDLabelsLabelIDDeleteWithHttpInfo
     *
     * delete a label from a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $label_id the label ID (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDLabelsLabelIDDeleteWithHttpInfo($telegraf_id, $label_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDLabelsLabelIDDeleteRequest($telegraf_id, $label_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDLabelsLabelIDDeleteAsync
     *
     * delete a label from a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $label_id the label ID (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsLabelIDDeleteAsync($telegraf_id, $label_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDLabelsLabelIDDeleteAsyncWithHttpInfo($telegraf_id, $label_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsLabelIDDeleteAsyncWithHttpInfo
     *
     * delete a label from a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $label_id the label ID (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsLabelIDDeleteAsyncWithHttpInfo($telegraf_id, $label_id, $zap_trace_span = null)
    {
        $returnType = '';
        $request = $this->telegrafsTelegrafIDLabelsLabelIDDeleteRequest($telegraf_id, $label_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDLabelsLabelIDDelete'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $label_id the label ID (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDLabelsLabelIDDeleteRequest($telegraf_id, $label_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDLabelsLabelIDDelete'
            );
        }
        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling telegrafsTelegrafIDLabelsLabelIDDelete'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/labels/{labelID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }
        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'labelID' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsPost
     *
     * add a label to a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\LabelMapping $label_mapping label to add (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\LabelResponse|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDLabelsPost($telegraf_id, $label_mapping, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDLabelsPostWithHttpInfo($telegraf_id, $label_mapping, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDLabelsPostWithHttpInfo
     *
     * add a label to a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\LabelMapping $label_mapping label to add (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\LabelResponse|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDLabelsPostWithHttpInfo($telegraf_id, $label_mapping, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDLabelsPostRequest($telegraf_id, $label_mapping, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\LabelResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\LabelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\LabelResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\LabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDLabelsPostAsync
     *
     * add a label to a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\LabelMapping $label_mapping label to add (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsPostAsync($telegraf_id, $label_mapping, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDLabelsPostAsyncWithHttpInfo($telegraf_id, $label_mapping, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDLabelsPostAsyncWithHttpInfo
     *
     * add a label to a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\LabelMapping $label_mapping label to add (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDLabelsPostAsyncWithHttpInfo($telegraf_id, $label_mapping, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\LabelResponse';
        $request = $this->telegrafsTelegrafIDLabelsPostRequest($telegraf_id, $label_mapping, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDLabelsPost'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\LabelMapping $label_mapping label to add (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDLabelsPostRequest($telegraf_id, $label_mapping, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDLabelsPost'
            );
        }
        // verify the required parameter 'label_mapping' is set
        if ($label_mapping === null || (is_array($label_mapping) && count($label_mapping) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_mapping when calling telegrafsTelegrafIDLabelsPost'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($label_mapping)) {
            $_tempBody = $label_mapping;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDMembersGet
     *
     * List all users with member privileges for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\ResourceMembers|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDMembersGet($telegraf_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDMembersGetWithHttpInfo($telegraf_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDMembersGetWithHttpInfo
     *
     * List all users with member privileges for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\ResourceMembers|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDMembersGetWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDMembersGetRequest($telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\ResourceMembers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\ResourceMembers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\ResourceMembers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\ResourceMembers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDMembersGetAsync
     *
     * List all users with member privileges for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersGetAsync($telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDMembersGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDMembersGetAsyncWithHttpInfo
     *
     * List all users with member privileges for a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\ResourceMembers';
        $request = $this->telegrafsTelegrafIDMembersGetRequest($telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDMembersGet'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDMembersGetRequest($telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDMembersGet'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDMembersPost
     *
     * Add telegraf config member
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as member (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\ResourceMember|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDMembersPost($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDMembersPostWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDMembersPostWithHttpInfo
     *
     * Add telegraf config member
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as member (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\ResourceMember|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDMembersPostWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDMembersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\InfluxDB2Generated\Model\ResourceMember' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\ResourceMember', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\ResourceMember';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\ResourceMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDMembersPostAsync
     *
     * Add telegraf config member
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as member (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersPostAsync($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDMembersPostAsyncWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDMembersPostAsyncWithHttpInfo
     *
     * Add telegraf config member
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as member (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersPostAsyncWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\ResourceMember';
        $request = $this->telegrafsTelegrafIDMembersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDMembersPost'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as member (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDMembersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDMembersPost'
            );
        }
        // verify the required parameter 'add_resource_member_request_body' is set
        if ($add_resource_member_request_body === null || (is_array($add_resource_member_request_body) && count($add_resource_member_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_resource_member_request_body when calling telegrafsTelegrafIDMembersPost'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($add_resource_member_request_body)) {
            $_tempBody = $add_resource_member_request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDMembersUserIDDelete
     *
     * removes a member from a telegraf config
     *
     * @param  string $user_id ID of member to remove (required)
     * @param  string $telegraf_id ID of the telegraf (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function telegrafsTelegrafIDMembersUserIDDelete($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $this->telegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo($user_id, $telegraf_id, $zap_trace_span);
    }

    /**
     * Operation telegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo
     *
     * removes a member from a telegraf config
     *
     * @param  string $user_id ID of member to remove (required)
     * @param  string $telegraf_id ID of the telegraf (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDMembersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDMembersUserIDDeleteAsync
     *
     * removes a member from a telegraf config
     *
     * @param  string $user_id ID of member to remove (required)
     * @param  string $telegraf_id ID of the telegraf (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersUserIDDeleteAsync($user_id, $telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo($user_id, $telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo
     *
     * removes a member from a telegraf config
     *
     * @param  string $user_id ID of member to remove (required)
     * @param  string $telegraf_id ID of the telegraf (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $returnType = '';
        $request = $this->telegrafsTelegrafIDMembersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDMembersUserIDDelete'
     *
     * @param  string $user_id ID of member to remove (required)
     * @param  string $telegraf_id ID of the telegraf (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDMembersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling telegrafsTelegrafIDMembersUserIDDelete'
            );
        }
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDMembersUserIDDelete'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/members/{userID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userID' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersGet
     *
     * List all owners of a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\ResourceOwners|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDOwnersGet($telegraf_id, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDOwnersGetWithHttpInfo($telegraf_id, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDOwnersGetWithHttpInfo
     *
     * List all owners of a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\ResourceOwners|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDOwnersGetWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDOwnersGetRequest($telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\ResourceOwners' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\ResourceOwners', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\ResourceOwners';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\ResourceOwners',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDOwnersGetAsync
     *
     * List all owners of a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersGetAsync($telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDOwnersGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersGetAsyncWithHttpInfo
     *
     * List all owners of a telegraf config
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersGetAsyncWithHttpInfo($telegraf_id, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\ResourceOwners';
        $request = $this->telegrafsTelegrafIDOwnersGetRequest($telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDOwnersGet'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDOwnersGetRequest($telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDOwnersGet'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/owners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersPost
     *
     * Add telegraf config owner
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as owner (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\ResourceOwner|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDOwnersPost($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDOwnersPostWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDOwnersPostWithHttpInfo
     *
     * Add telegraf config owner
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as owner (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\ResourceOwner|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDOwnersPostWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDOwnersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\InfluxDB2Generated\Model\ResourceOwner' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\ResourceOwner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\ResourceOwner';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\ResourceOwner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDOwnersPostAsync
     *
     * Add telegraf config owner
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as owner (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersPostAsync($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDOwnersPostAsyncWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersPostAsyncWithHttpInfo
     *
     * Add telegraf config owner
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as owner (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersPostAsyncWithHttpInfo($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\ResourceOwner';
        $request = $this->telegrafsTelegrafIDOwnersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDOwnersPost'
     *
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  \InfluxDB2Generated\Model\AddResourceMemberRequestBody $add_resource_member_request_body user to add as owner (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDOwnersPostRequest($telegraf_id, $add_resource_member_request_body, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDOwnersPost'
            );
        }
        // verify the required parameter 'add_resource_member_request_body' is set
        if ($add_resource_member_request_body === null || (is_array($add_resource_member_request_body) && count($add_resource_member_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_resource_member_request_body when calling telegrafsTelegrafIDOwnersPost'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/owners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($add_resource_member_request_body)) {
            $_tempBody = $add_resource_member_request_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersUserIDDelete
     *
     * removes an owner from a telegraf config
     *
     * @param  string $user_id ID of owner to remove (required)
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function telegrafsTelegrafIDOwnersUserIDDelete($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $this->telegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo($user_id, $telegraf_id, $zap_trace_span);
    }

    /**
     * Operation telegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo
     *
     * removes an owner from a telegraf config
     *
     * @param  string $user_id ID of owner to remove (required)
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDOwnersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDOwnersUserIDDeleteAsync
     *
     * removes an owner from a telegraf config
     *
     * @param  string $user_id ID of owner to remove (required)
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersUserIDDeleteAsync($user_id, $telegraf_id, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo($user_id, $telegraf_id, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo
     *
     * removes an owner from a telegraf config
     *
     * @param  string $user_id ID of owner to remove (required)
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo($user_id, $telegraf_id, $zap_trace_span = null)
    {
        $returnType = '';
        $request = $this->telegrafsTelegrafIDOwnersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDOwnersUserIDDelete'
     *
     * @param  string $user_id ID of owner to remove (required)
     * @param  string $telegraf_id ID of the telegraf config (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDOwnersUserIDDeleteRequest($user_id, $telegraf_id, $zap_trace_span = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling telegrafsTelegrafIDOwnersUserIDDelete'
            );
        }
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDOwnersUserIDDelete'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}/owners/{userID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userID' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation telegrafsTelegrafIDPut
     *
     * Update a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config update to apply (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error
     */
    public function telegrafsTelegrafIDPut($telegraf_id, $telegraf_request, $zap_trace_span = null)
    {
        list($response) = $this->telegrafsTelegrafIDPutWithHttpInfo($telegraf_id, $telegraf_request, $zap_trace_span);
        return $response;
    }

    /**
     * Operation telegrafsTelegrafIDPutWithHttpInfo
     *
     * Update a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config update to apply (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InfluxDB2Generated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfluxDB2Generated\Model\Telegraf|\InfluxDB2Generated\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function telegrafsTelegrafIDPutWithHttpInfo($telegraf_id, $telegraf_request, $zap_trace_span = null)
    {
        $request = $this->telegrafsTelegrafIDPutRequest($telegraf_id, $telegraf_request, $zap_trace_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\InfluxDB2Generated\Model\Telegraf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Telegraf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\InfluxDB2Generated\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfluxDB2Generated\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfluxDB2Generated\Model\Telegraf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Telegraf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfluxDB2Generated\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation telegrafsTelegrafIDPutAsync
     *
     * Update a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config update to apply (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDPutAsync($telegraf_id, $telegraf_request, $zap_trace_span = null)
    {
        return $this->telegrafsTelegrafIDPutAsyncWithHttpInfo($telegraf_id, $telegraf_request, $zap_trace_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation telegrafsTelegrafIDPutAsyncWithHttpInfo
     *
     * Update a telegraf config
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config update to apply (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function telegrafsTelegrafIDPutAsyncWithHttpInfo($telegraf_id, $telegraf_request, $zap_trace_span = null)
    {
        $returnType = '\InfluxDB2Generated\Model\Telegraf';
        $request = $this->telegrafsTelegrafIDPutRequest($telegraf_id, $telegraf_request, $zap_trace_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'telegrafsTelegrafIDPut'
     *
     * @param  string $telegraf_id ID of telegraf config (required)
     * @param  \InfluxDB2Generated\Model\TelegrafRequest $telegraf_request telegraf config update to apply (required)
     * @param  string $zap_trace_span OpenTracing span context (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function telegrafsTelegrafIDPutRequest($telegraf_id, $telegraf_request, $zap_trace_span = null)
    {
        // verify the required parameter 'telegraf_id' is set
        if ($telegraf_id === null || (is_array($telegraf_id) && count($telegraf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_id when calling telegrafsTelegrafIDPut'
            );
        }
        // verify the required parameter 'telegraf_request' is set
        if ($telegraf_request === null || (is_array($telegraf_request) && count($telegraf_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telegraf_request when calling telegrafsTelegrafIDPut'
            );
        }

        $resourcePath = '/telegrafs/{telegrafID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zap_trace_span !== null) {
            $headerParams['Zap-Trace-Span'] = ObjectSerializer::toHeaderValue($zap_trace_span);
        }

        // path params
        if ($telegraf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telegrafID' . '}',
                ObjectSerializer::toPathValue($telegraf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($telegraf_request)) {
            $_tempBody = $telegraf_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

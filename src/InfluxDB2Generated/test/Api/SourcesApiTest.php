<?php
/**
 * SourcesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace InfluxDB2Generated;

use \InfluxDB2Generated\Configuration;
use \InfluxDB2Generated\ApiException;
use \InfluxDB2Generated\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SourcesApiTest Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SourcesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for sourcesGet
     *
     * Get all sources.
     *
     */
    public function testSourcesGet()
    {
    }

    /**
     * Test case for sourcesPost
     *
     * Creates a Source.
     *
     */
    public function testSourcesPost()
    {
    }

    /**
     * Test case for sourcesSourceIDBucketsGet
     *
     * Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source).
     *
     */
    public function testSourcesSourceIDBucketsGet()
    {
    }

    /**
     * Test case for sourcesSourceIDDelete
     *
     * Delete a source.
     *
     */
    public function testSourcesSourceIDDelete()
    {
    }

    /**
     * Test case for sourcesSourceIDGet
     *
     * Get a source.
     *
     */
    public function testSourcesSourceIDGet()
    {
    }

    /**
     * Test case for sourcesSourceIDHealthGet
     *
     * Get a sources health.
     *
     */
    public function testSourcesSourceIDHealthGet()
    {
    }

    /**
     * Test case for sourcesSourceIDPatch
     *
     * Updates a Source.
     *
     */
    public function testSourcesSourceIDPatch()
    {
    }
}

<?php
/**
 * OrganizationsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace InfluxDB2Generated;

use \InfluxDB2Generated\Configuration;
use \InfluxDB2Generated\ApiException;
use \InfluxDB2Generated\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrganizationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  InfluxDB2Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for orgsGet
     *
     * List all organizations.
     *
     */
    public function testOrgsGet()
    {
    }

    /**
     * Test case for orgsOrgIDDelete
     *
     * Delete an organization.
     *
     */
    public function testOrgsOrgIDDelete()
    {
    }

    /**
     * Test case for orgsOrgIDGet
     *
     * Retrieve an organization.
     *
     */
    public function testOrgsOrgIDGet()
    {
    }

    /**
     * Test case for orgsOrgIDLabelsGet
     *
     * list all labels for a organization.
     *
     */
    public function testOrgsOrgIDLabelsGet()
    {
    }

    /**
     * Test case for orgsOrgIDLabelsLabelIDDelete
     *
     * delete a label from an organization.
     *
     */
    public function testOrgsOrgIDLabelsLabelIDDelete()
    {
    }

    /**
     * Test case for orgsOrgIDLabelsPost
     *
     * add a label to an organization.
     *
     */
    public function testOrgsOrgIDLabelsPost()
    {
    }

    /**
     * Test case for orgsOrgIDLogsGet
     *
     * Retrieve operation logs for an organization.
     *
     */
    public function testOrgsOrgIDLogsGet()
    {
    }

    /**
     * Test case for orgsOrgIDMembersGet
     *
     * List all members of an organization.
     *
     */
    public function testOrgsOrgIDMembersGet()
    {
    }

    /**
     * Test case for orgsOrgIDMembersPost
     *
     * Add organization member.
     *
     */
    public function testOrgsOrgIDMembersPost()
    {
    }

    /**
     * Test case for orgsOrgIDMembersUserIDDelete
     *
     * removes a member from an organization.
     *
     */
    public function testOrgsOrgIDMembersUserIDDelete()
    {
    }

    /**
     * Test case for orgsOrgIDOwnersGet
     *
     * List all owners of an organization.
     *
     */
    public function testOrgsOrgIDOwnersGet()
    {
    }

    /**
     * Test case for orgsOrgIDOwnersPost
     *
     * Add organization owner.
     *
     */
    public function testOrgsOrgIDOwnersPost()
    {
    }

    /**
     * Test case for orgsOrgIDOwnersUserIDDelete
     *
     * removes an owner from an organization.
     *
     */
    public function testOrgsOrgIDOwnersUserIDDelete()
    {
    }

    /**
     * Test case for orgsOrgIDPatch
     *
     * Update an organization.
     *
     */
    public function testOrgsOrgIDPatch()
    {
    }

    /**
     * Test case for orgsOrgIDSecretsDeletePost
     *
     * delete provided secrets.
     *
     */
    public function testOrgsOrgIDSecretsDeletePost()
    {
    }

    /**
     * Test case for orgsOrgIDSecretsGet
     *
     * List all secret keys for an organization.
     *
     */
    public function testOrgsOrgIDSecretsGet()
    {
    }

    /**
     * Test case for orgsOrgIDSecretsPatch
     *
     * Apply patch to the provided secrets.
     *
     */
    public function testOrgsOrgIDSecretsPatch()
    {
    }

    /**
     * Test case for orgsPost
     *
     * Create an organization.
     *
     */
    public function testOrgsPost()
    {
    }
}
